#!/usr/bin/env python3

import sys
import os
import torch
import numpy as np
import dataclasses

sys.path.append('.')
import graphnet as GNN

def usage():
    print('Usage: python create_infer_data.py <dataset> <split> <num_samples>')
    print('    (dataset: flag_simple, cylinder_flow, deforming_plate)')
    exit(1)

class Sampler(torch.utils.data.Sampler):
    def __init__(self, ds):
        self.ds = ds

    def __iter__(self):
        stride = list(self.ds.files.items())[0][1] - 1
        i = 0
        for _ in range(len(self.ds)):
            yield i
            i = (i + stride) % (len(self.ds) - 1)

    def __len__(self): return len(self.ds)


if __name__ == '__main__':
    if len(sys.argv) != 5: usage()
    out_path = sys.argv[1]
    dataset_name = sys.argv[2]
    split = sys.argv[3]
    num_samples = int(sys.argv[4])

    model = {
        'flag_simple': 'cloth',
        'cylinder_flow': 'incomprns',
        'deforming_plate': 'hyperel',
        'airfoil': 'comprns'
    }[dataset_name]

    if model == 'cloth': import cloth as M
    elif model == 'incomprns': import incomprns as M
    elif model == 'hyperel': import hyperel as M
    elif model == 'comprns': import comprns as M
    else: raise ValueError(f'Unknown model {model}')

    ds = M.dataset_type(f'./data/{dataset_name}_np/{split}')

    print('Generating infer data...')
    dl = torch.utils.data.DataLoader(
        ds,
        shuffle=False,
        batch_size=1,
        num_workers=16,
        sampler=Sampler(ds),
        collate_fn=lambda batch: GNN.collate_common(batch, M.batch_type))

    gen = iter(dl)
    os.makedirs(out_path, exist_ok=True)

    for i in range(num_samples):
        s = next(gen)
        num_nodes = s.node_type.size(0)
        print(f'Sample {i}: {num_nodes} nodes')

        batch_np = {
            k: v.numpy()
            for k, v in dataclasses.asdict(s).items()
        }

        np.savez_compressed(f'{out_path}/{i}.npz', **batch_np)
